<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering | Markus Hofbauer</title>
    <link>https://hofbi.github.io/category/software-engineering/</link>
      <atom:link href="https://hofbi.github.io/category/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <description>Software Engineering</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Markus Hofbauer</copyright><lastBuildDate>Fri, 01 May 2020 15:00:00 +0000</lastBuildDate>
    <image>
      <url>https://hofbi.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Software Engineering</title>
      <link>https://hofbi.github.io/category/software-engineering/</link>
    </image>
    
    <item>
      <title>Scale your Workflow</title>
      <link>https://hofbi.github.io/slides/workflow/</link>
      <pubDate>Fri, 01 May 2020 15:00:00 +0000</pubDate>
      <guid>https://hofbi.github.io/slides/workflow/</guid>
      <description>&lt;h1 id=&#34;scale-your-workflow&#34;&gt;Scale your Workflow&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Project Management&lt;/li&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;project-management&#34;&gt;Project Management&lt;/h2&gt;
&lt;p&gt;Integrated in &lt;a href=&#34;https://gitlab.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitLab&lt;/a&gt;|&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;|&lt;a href=&#34;https://bitbucket.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bitbucket&lt;/a&gt;|&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issue Trackers&lt;/li&gt;
&lt;li&gt;Milestones&lt;/li&gt;
&lt;li&gt;Boards&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;issue-trackers&#34;&gt;Issue Trackers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Collect ideas&lt;/li&gt;
&lt;li&gt;Document and discuss your decisions/progress
&lt;ul&gt;
&lt;li&gt;For/with others&lt;/li&gt;
&lt;li&gt;For/with your future self&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://pics.me.me/yes-i-talk-to-myself-thats-because-sometimes-i-need-14183709.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;team-discussions&#34;&gt;Team Discussions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Early feedback&lt;/li&gt;
&lt;li&gt;Constantly explain/justify/rethink your ideas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Fail Often, Fail Fast, Fail Early&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Common rules you should always follow
&lt;ul&gt;
&lt;li&gt;SOLID Guidelines&lt;/li&gt;
&lt;li&gt;DRY (Don&amp;rsquo;t repeat yourself)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design Patterns
&lt;ul&gt;
&lt;li&gt;Existing solutions for common design problems&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t reinvent the wheel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit Tests
&lt;ul&gt;
&lt;li&gt;Test individual components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration Tests
&lt;ul&gt;
&lt;li&gt;Test interaction of larger parts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System Tests
&lt;ul&gt;
&lt;li&gt;Test the entire system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;checks&#34;&gt;Checks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Consistency is key&lt;/li&gt;
&lt;li&gt;Automate whenever possible&lt;/li&gt;
&lt;li&gt;Code Format
&lt;ul&gt;
&lt;li&gt;Consistent code layout&lt;/li&gt;
&lt;li&gt;Available for almost every language&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linters
&lt;ul&gt;
&lt;li&gt;Avoid common errors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;c&#34;&gt;C++&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Clang-Format&lt;/li&gt;
&lt;li&gt;CMake-Format&lt;/li&gt;
&lt;li&gt;Clang-Tidy&lt;/li&gt;
&lt;li&gt;CppCheck&lt;/li&gt;
&lt;li&gt;CppLint&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;yapf&lt;/li&gt;
&lt;li&gt;pylint&lt;/li&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;sample&#34;&gt;Sample&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for t, m, ms in bag.read_messages():
    # do something
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C0103: Variable name &amp;quot;t&amp;quot; doesn&#39;t conform to snake_case
naming style (invalid-name)

W0612: Unused variable &#39;t&#39; (unused-variable)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;p&gt;Know your tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDE for the heavy development&lt;/li&gt;
&lt;li&gt;Editor as your swiss army knife&lt;/li&gt;
&lt;li&gt;Shortcuts&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;version-control&#34;&gt;Version Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git&lt;/a&gt; as most common tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git Feature Branch Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code Review
&lt;ul&gt;
&lt;li&gt;Knowledge transfer in both directions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;continuous-integration&#34;&gt;Continuous Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatically run in a configured environment&lt;/li&gt;
&lt;li&gt;Requires scripted/containerized environment setup&lt;/li&gt;
&lt;li&gt;Avoid &lt;em&gt;&amp;ldquo;Works on my machine&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ci-failure&#34;&gt;CI Failure&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;fail.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ci-pass&#34;&gt;CI Pass&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;pass.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Summarize the latest status&lt;/li&gt;
&lt;li&gt;Requires active maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>https://hofbi.github.io/slides/tdd/</link>
      <pubDate>Thu, 16 Jan 2020 15:00:00 +0000</pubDate>
      <guid>https://hofbi.github.io/slides/tdd/</guid>
      <description>&lt;h1 id=&#34;test-driven-development&#34;&gt;Test Driven Development&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hofbi/tdd-sample&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;unit-tests&#34;&gt;Unit Tests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Separate (non production) program/code to test your code&lt;/li&gt;
&lt;li&gt;Test your code on the lowest (unit) layer&lt;/li&gt;
&lt;li&gt;General 3 step structure of a unit test
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Given&lt;/strong&gt;: Setup unit and environment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When&lt;/strong&gt;: Execute unit to test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Then&lt;/strong&gt;: Test for expected result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;why-tests&#34;&gt;Why Tests&lt;/h3&gt;
&lt;p&gt;Michael Feathers, Working Effectively with Legacy Code&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“To me, legacy code is simply code without tests.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Write your test before your production code&lt;/li&gt;
&lt;li&gt;3 Phases
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Red Phase&lt;/strong&gt;: Define a failing test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Green Phase&lt;/strong&gt;: Fix that test (Solve Simple)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: Clean up your code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;img src=&#34;https://angularjsbeginnerguide.files.wordpress.com/2017/01/tdd.jpg&#34; alt=&#34;TDD Workflow&#34; height=&#34;500&#34;/&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fizzbuzz-task&#34;&gt;FizzBuzz Task&lt;/h2&gt;
&lt;p&gt;Write a function that returns the number it was given or &lt;em&gt;Fizz&lt;/em&gt; if it is multiple of 3, &lt;em&gt;Buzz&lt;/em&gt; if it is multiple of 5 or &lt;em&gt;FizzBuzz&lt;/em&gt; if it is multiple of both.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hofbi/tdd-sample#cpp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++&lt;/a&gt; | &lt;a href=&#34;https://github.com/hofbi/tdd-sample#python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;task-definition&#34;&gt;Task Definition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Can call function &lt;code&gt;fizzBuzz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return 1 for 1&lt;/li&gt;
&lt;li&gt;Return 2 for 2&lt;/li&gt;
&lt;li&gt;Return Fizz for 3&lt;/li&gt;
&lt;li&gt;Return Buzz for 5&lt;/li&gt;
&lt;li&gt;Return Fizz for 6&lt;/li&gt;
&lt;li&gt;Return Buzz for 10&lt;/li&gt;
&lt;li&gt;Return FizzBuzz for 15&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hofbi/tdd-sample&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Try yourself&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
